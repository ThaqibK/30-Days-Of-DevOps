pipeline {
    agent any
    
    tools{
        maven 'maven3'
        jdk 'jdk17'
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ThaqibK/Shopping-Cart.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Unit Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Shopping-Cart -Dsoner.projectName=Shopping-Cart \
                    -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('OWASP Dependency check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Deploy to nexux') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
				sh "mvn deploy -DskipTests=true"
				}
            }
        }
        
        stage('Docker Build & tag Image') {
            steps {
				script {
					withDockerRegistry(credentialsID: 'docker-cred', toolNmae: 'docker') {
						sh "docker build -t thaqib2000/Shopping-Cart:latest -f docker/Dockerfile ."
					}
				}
            }
        }
		
		stage('Trivy Scan') {
            steps {
                sh "trivy image thaqib2000/Shopping-Cart:latest > trivy-report.txt"
            }
        }
		
		stage('Docker Push Image') {
            steps {
				script {
					withDockerRegistry(credentialsID: 'docker-cred', toolNmae: 'docker') {
						sh "docker push thaqib2000/Shopping-Cart:latest"
					}
				}
            }
        }
		
		stage('Kubernetes Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsID: 'K8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.8.162.6443') {
					sh "kubectl apply -f deploymentservice.yml"
					sh "kubectl get svc -n webapps"
				}
            }
        }
    }
}
